import React from 'react';
import { X, FileText, Image, Video, Music, FileX, Download, Calendar, HardDrive } from 'lucide-react';
import { StoredAnalysis } from '../types/types';

interface AnalysisDetailDialogProps {
  analysis: StoredAnalysis | null;
  isOpen: boolean;
  onClose: () => void;
}

const getFileIcon = (fileType: string) => {
  switch (fileType.toLowerCase()) {
    case 'text':
      return <FileText className="h-6 w-6 text-blue-400" />;
    case 'image':
      return <Image className="h-6 w-6 text-green-400" />;
    case 'video':
      return <Video className="h-6 w-6 text-purple-400" />;
    case 'audio':
      return <Music className="h-6 w-6 text-orange-400" />;
    case 'pdf':
      return <FileText className="h-6 w-6 text-red-400" />;
    default:
      return <FileX className="h-6 w-6 text-gray-400" />;
  }
};

const exportAnalysis = (analysis: StoredAnalysis) => {
  const content = `File Analysis Report
=====================

File Name: ${analysis.fileName}
File Type: ${analysis.fileType}
File Size: ${analysis.fileSize}
Analysis Date: ${analysis.analysisDate.toLocaleString()}

Analysis:
${analysis.description}

${analysis.error ? `\nError: ${analysis.error}` : ''}

Generated by Prism AI Analysis Tool`;

  const blob = new Blob([content], { type: 'text/plain' });
  const url = URL.createObjectURL(blob);
  const a = document.createElement('a');
  a.href = url;
  a.download = `analysis-${analysis.fileName}-${analysis.analysisDate.toISOString().split('T')[0]}.txt`;
  document.body.appendChild(a);
  a.click();
  document.body.removeChild(a);
  URL.revokeObjectURL(url);
};

export const AnalysisDetailDialog: React.FC<AnalysisDetailDialogProps> = ({
  analysis,
  isOpen,
  onClose
}) => {
  if (!isOpen || !analysis) return null;

  return (
    <div className="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4">
      <div className="bg-gray-900 border border-gray-700 rounded-lg max-w-2xl w-full max-h-[80vh] overflow-hidden">
        {/* Header */}
        <div className="flex items-center justify-between p-4 border-b border-gray-700">
          <div className="flex items-center gap-3">
            {getFileIcon(analysis.fileType)}
            <div>
              <h2 className="text-lg font-semibold text-white">Analysis Details</h2>
              <p className="text-sm text-gray-400">{analysis.fileName}</p>
            </div>
          </div>
          
          <div className="flex items-center gap-2">
            <button
              onClick={() => exportAnalysis(analysis)}
              className="p-2 text-gray-400 hover:text-white hover:bg-gray-800 rounded-lg transition-colors"
              title="Export analysis"
            >
              <Download className="h-4 w-4" />
            </button>
            
            <button
              onClick={onClose}
              className="p-2 text-gray-400 hover:text-white hover:bg-gray-800 rounded-lg transition-colors"
              title="Close dialog"
            >
              <X className="h-4 w-4" />
            </button>
          </div>
        </div>

        {/* Content */}
        <div className="p-4 overflow-y-auto max-h-[calc(80vh-120px)]">
          {/* File Metadata */}
          <div className="bg-gray-800/50 rounded-lg p-4 mb-4">
            <h3 className="text-sm font-medium text-gray-300 mb-3">File Information</h3>
            
            <div className="grid grid-cols-2 gap-4 text-sm">
              <div className="flex items-center gap-2">
                <FileText className="h-4 w-4 text-gray-400" />
                <span className="text-gray-400">Type:</span>
                <span className="text-white">{analysis.fileType}</span>
              </div>
              
              <div className="flex items-center gap-2">
                <HardDrive className="h-4 w-4 text-gray-400" />
                <span className="text-gray-400">Size:</span>
                <span className="text-white">{analysis.fileSize}</span>
              </div>
              
              <div className="flex items-center gap-2 col-span-2">
                <Calendar className="h-4 w-4 text-gray-400" />
                <span className="text-gray-400">Analyzed:</span>
                <span className="text-white">{analysis.analysisDate.toLocaleString()}</span>
              </div>
            </div>
          </div>

          {/* Error Display */}
          {analysis.error && (
            <div className="bg-red-500/10 border border-red-500/20 rounded-lg p-4 mb-4">
              <h3 className="text-sm font-medium text-red-400 mb-2">Analysis Error</h3>
              <p className="text-red-300 text-sm">{analysis.error}</p>
            </div>
          )}

          {/* Analysis Content */}
          <div className="bg-gray-800/50 rounded-lg p-4">
            <h3 className="text-sm font-medium text-gray-300 mb-3">Analysis Results</h3>
            <div className="text-sm text-gray-400 whitespace-pre-wrap leading-relaxed">
              {analysis.description}
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};